[
  {
    "id": 651445150,
    "repository_id": 1697900,
    "commit_id": 198533547,
    "number": "21218",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "travis, appveyor, build: bump builder Go to 1.13.8",
    "pull_request_number": 20681,
    "config": {
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum",
      "sudo": false,
      "jobs": {
        "include": [
          {
            "stage": "lint",
            "os": "linux",
            "dist": "xenial",
            "go": "1.13.x",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "stage": "build",
            "os": "linux",
            "dist": "xenial",
            "go": "1.11.x",
            "env": [
              "GO111MODULE=on"
            ],
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "stage": "build",
            "os": "linux",
            "dist": "xenial",
            "go": "1.12.x",
            "env": [
              "GO111MODULE=on"
            ],
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "stage": "build",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "go": "1.13.x",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "stage": "build",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "go": "1.13.x",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "stage": "build",
            "os": "osx",
            "osx_image": "xcode11.3",
            "go": "1.13.x",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "stage": "build",
            "if": "type = push",
            "os": "linux",
            "dist": "xenial",
            "go": "1.13.x",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.8 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "stage": "build",
            "if": "type = push",
            "os": "linux",
            "dist": "xenial",
            "sudo": "required",
            "go": "1.13.x",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "stage": "build",
            "if": "type = push",
            "os": "linux",
            "dist": "xenial",
            "services": [
              "docker"
            ],
            "go": "1.13.x",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "stage": "build",
            "if": "type = push",
            "os": "linux",
            "dist": "xenial",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "language": "android",
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "before_install": [
              "curl https://dl.google.com/go/go1.13.8.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ],
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ]
          },
          {
            "stage": "build",
            "if": "type = push",
            "os": "osx",
            "go": "1.13.x",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "stage": "build",
            "if": "type = cron",
            "os": "linux",
            "dist": "xenial",
            "go": "1.13.x",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      ".result": "configured",
      "os": "linux",
      "group": "stable",
      "dist": "xenial"
    },
    "state": "errored",
    "started_at": "2020-02-17T11:24:39Z",
    "finished_at": "2020-02-17T11:25:05Z",
    "duration": 26,
    "job_ids": [
      651445151,
      651445152,
      651445155,
      651445156,
      651445157,
      651445158
    ]
  },
  {
    "id": 651442691,
    "repository_id": 1697900,
    "commit_id": 198532826,
    "number": "21217",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "cmd/ethkey: speed up test by using weaker scrypt parameters",
    "pull_request_number": 20680,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "errored",
    "started_at": "2020-02-17T11:07:56Z",
    "finished_at": "2020-02-17T11:42:27Z",
    "duration": 4821,
    "job_ids": [
      651442692,
      651442693,
      651442694,
      651442695,
      651442696,
      651442697
    ]
  },
  {
    "id": 651441540,
    "repository_id": 1697900,
    "commit_id": 198532482,
    "number": "21216",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "p2p: remove MeteredPeerEvent",
    "pull_request_number": 20679,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-17T11:05:15Z",
    "finished_at": "2020-02-17T11:35:42Z",
    "duration": 5942,
    "job_ids": [
      651441541,
      651441542,
      651441543,
      651441544,
      651441545,
      651441546
    ]
  },
  {
    "id": 651420612,
    "repository_id": 1697900,
    "commit_id": 198525886,
    "number": "21215",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "eth: don't enforce minimum broadcast, fix broadcast test",
    "pull_request_number": 20678,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-17T10:12:30Z",
    "finished_at": "2020-02-17T10:45:35Z",
    "duration": 6256,
    "job_ids": [
      651420613,
      651420614,
      651420615,
      651420616,
      651420617,
      651420618
    ]
  },
  {
    "id": 651396099,
    "repository_id": 1697900,
    "commit_id": 198518638,
    "number": "21214",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "core/types: add From() helper function for Transaction",
    "pull_request_number": 20677,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-17T09:08:21Z",
    "finished_at": "2020-02-17T09:42:11Z",
    "duration": 6416,
    "job_ids": [
      651396100,
      651396101,
      651396102,
      651396103,
      651396104,
      651396105
    ]
  },
  {
    "id": 651377020,
    "repository_id": 1697900,
    "commit_id": 198512978,
    "number": "21213",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "core, light: add unlock before Reset to avoid double lock",
    "pull_request_number": 20654,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-17T08:18:46Z",
    "finished_at": "2020-02-17T08:21:10Z",
    "duration": 144,
    "job_ids": [
      651377021,
      651377022,
      651377023,
      651377024,
      651377025,
      651377026
    ]
  },
  {
    "id": 651368228,
    "repository_id": 1697900,
    "commit_id": 198510310,
    "number": "21212",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "console, test: add stop chan to fix goroutine leak",
    "pull_request_number": 20667,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-17T07:53:31Z",
    "finished_at": "2020-02-17T08:25:58Z",
    "duration": 6168,
    "job_ids": [
      651368229,
      651368230,
      651368231,
      651368232,
      651368233,
      651368234
    ]
  },
  {
    "id": 651056962,
    "repository_id": 1697900,
    "commit_id": 198411241,
    "number": "21211",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "les: separate peer into clientPeer and serverPeer",
    "pull_request_number": 19991,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-16T09:36:46Z",
    "finished_at": "2020-02-16T10:07:48Z",
    "duration": 5963,
    "job_ids": [
      651056963,
      651056964,
      651056965,
      651056966,
      651056967,
      651056968
    ]
  },
  {
    "id": 650604089,
    "repository_id": 1697900,
    "commit_id": 198262907,
    "number": "21209",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "build: Add .txt extension to COPYING",
    "pull_request_number": 20673,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-14T20:32:12Z",
    "finished_at": "2020-02-14T21:03:54Z",
    "duration": 5975,
    "job_ids": [
      650604090,
      650604091,
      650604092,
      650604093,
      650604094,
      650604095
    ]
  },
  {
    "id": 650353681,
    "repository_id": 1697900,
    "commit_id": 198179193,
    "number": "21208",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "cmd/faucet: protect f.reqs with Rlock to prevent data race",
    "pull_request_number": 20669,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-14T09:23:19Z",
    "finished_at": "2020-02-14T09:57:57Z",
    "duration": 6111,
    "job_ids": [
      650353682,
      650353683,
      650353684,
      650353685,
      650353686,
      650353687
    ]
  },
  {
    "id": 650341954,
    "repository_id": 1697900,
    "commit_id": 198175270,
    "number": "21206",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "Transaction background indexing/unindexing + improved chain initiation from freezer",
    "pull_request_number": 20302,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-14T08:44:39Z",
    "finished_at": "2020-02-14T09:19:30Z",
    "duration": 6075,
    "job_ids": [
      650341955,
      650341956,
      650341957,
      650341958,
      650341959,
      650341960
    ]
  },
  {
    "id": 650338919,
    "repository_id": 1697900,
    "commit_id": 198174377,
    "number": "21205",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "Transaction background indexing/unindexing + improved chain initiation from freezer",
    "pull_request_number": 20302,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-14T08:34:18Z",
    "finished_at": "2020-02-14T08:36:41Z",
    "duration": 143,
    "job_ids": [
      650338920,
      650338921,
      650338922,
      650338923,
      650338924,
      650338925
    ]
  },
  {
    "id": 650243198,
    "repository_id": 1697900,
    "commit_id": 198143897,
    "number": "21204",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "core: test.Fatal() can only be used in test goroutine instead of its child",
    "pull_request_number": 20668,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-14T01:57:49Z",
    "finished_at": "2020-02-14T02:28:26Z",
    "duration": 6055,
    "job_ids": [
      650243199,
      650243200,
      650243201,
      650243202,
      650243203,
      650243204
    ]
  },
  {
    "id": 650017953,
    "repository_id": 1697900,
    "commit_id": 198071487,
    "number": "21203",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "cmd/faucet: protect f.reqs with Rlock to prevent data race",
    "pull_request_number": 20669,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "passed",
    "started_at": "2020-02-13T15:43:03Z",
    "finished_at": "2020-02-13T16:15:16Z",
    "duration": 6308,
    "job_ids": [
      650017954,
      650017955,
      650017956,
      650017957,
      650017958,
      650017959
    ]
  },
  {
    "id": 650014674,
    "repository_id": 1697900,
    "commit_id": 198070330,
    "number": "21202",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "cmd/faucet: protect f.reqs with Rlock to prevent data race",
    "pull_request_number": 20669,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-13T15:35:51Z",
    "finished_at": "2020-02-13T15:38:16Z",
    "duration": 145,
    "job_ids": [
      650014675,
      650014676,
      650014677,
      650014678,
      650014679,
      650014680
    ]
  },
  {
    "id": 650005808,
    "repository_id": 1697900,
    "commit_id": 198067447,
    "number": "21201",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "core: test.Fatal() can only be used in test goroutine instead of its child",
    "pull_request_number": 20668,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-13T15:29:29Z",
    "finished_at": "2020-02-13T16:03:32Z",
    "duration": 7759,
    "job_ids": [
      650005809,
      650005810,
      650005811,
      650005812,
      650005813,
      650005814
    ]
  },
  {
    "id": 650001741,
    "repository_id": 1697900,
    "commit_id": 198066269,
    "number": "21200",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "console, test: add stop chan to fix goroutine leak",
    "pull_request_number": 20667,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "passed",
    "started_at": "2020-02-13T15:10:03Z",
    "finished_at": "2020-02-13T15:51:42Z",
    "duration": 6726,
    "job_ids": [
      650001742,
      650001743,
      650001744,
      650001745,
      650001746,
      650001747
    ]
  },
  {
    "id": 649989749,
    "repository_id": 1697900,
    "commit_id": 198062691,
    "number": "21199",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "console, test: add stop chan to fix goroutine leak",
    "pull_request_number": 20667,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-13T14:48:03Z",
    "finished_at": "2020-02-13T14:50:21Z",
    "duration": 138,
    "job_ids": [
      649989750,
      649989751,
      649989752,
      649989753,
      649989754,
      649989755
    ]
  },
  {
    "id": 649953642,
    "repository_id": 1697900,
    "commit_id": 198051361,
    "number": "21196",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "core, eth: announce based transaction propagation",
    "pull_request_number": 20234,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "errored",
    "started_at": "2020-02-13T13:28:16Z",
    "finished_at": "2020-02-13T13:28:44Z",
    "duration": 28,
    "job_ids": [
      649953643,
      649953644,
      649953645,
      649953646,
      649953647,
      649953648
    ]
  },
  {
    "id": 649930494,
    "repository_id": 1697900,
    "commit_id": 198043884,
    "number": "21195",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "core, eth: announce based transaction propagation",
    "pull_request_number": 20234,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-13T12:31:15Z",
    "finished_at": "2020-02-13T13:01:43Z",
    "duration": 6249,
    "job_ids": [
      649930495,
      649930496,
      649930497,
      649930498,
      649930499,
      649930500
    ]
  },
  {
    "id": 649885876,
    "repository_id": 1697900,
    "commit_id": 198029981,
    "number": "21194",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "Add 1 buffer to fix goroutine leak in test",
    "pull_request_number": 20666,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-13T10:29:39Z",
    "finished_at": "2020-02-13T11:00:36Z",
    "duration": 5962,
    "job_ids": [
      649885877,
      649885878,
      649885879,
      649885880,
      649885881,
      649885882
    ]
  },
  {
    "id": 649867401,
    "repository_id": 1697900,
    "commit_id": 198024181,
    "number": "21192",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "node: add log message when boot is aborted",
    "pull_request_number": 20665,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-13T09:36:29Z",
    "finished_at": "2020-02-13T10:06:55Z",
    "duration": 5938,
    "job_ids": [
      649867402,
      649867403,
      649867404,
      649867405,
      649867406,
      649867407
    ]
  },
  {
    "id": 649790662,
    "repository_id": 1697900,
    "commit_id": 197998633,
    "number": "21191",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "cmd/puppeth: add flags to support non-interactive genesis.json creation ",
    "pull_request_number": 20664,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-13T04:23:06Z",
    "finished_at": "2020-02-13T04:25:29Z",
    "duration": 143,
    "job_ids": [
      649790663,
      649790664,
      649790665,
      649790666,
      649790667,
      649790668
    ]
  },
  {
    "id": 649790273,
    "repository_id": 1697900,
    "commit_id": 197998495,
    "number": "21190",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "cmd/puppeth: add flags to support non-interactive genesis.json creation ",
    "pull_request_number": 20664,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-13T04:21:19Z",
    "finished_at": "2020-02-13T04:23:38Z",
    "duration": 139,
    "job_ids": [
      649790274,
      649790275,
      649790276,
      649790277,
      649790278,
      649790279
    ]
  },
  {
    "id": 649785718,
    "repository_id": 1697900,
    "commit_id": 197997024,
    "number": "21189",
    "event_type": "pull_request",
    "pull_request": true,
    "pull_request_title": "cmd/puppeth: add flags to support non-interactive genesis.json creation ",
    "pull_request_number": 20664,
    "config": {
      "os": "linux",
      "dist": "xenial",
      "jobs": {
        "include": [
          {
            "go": "1.13.x",
            "os": "linux",
            "env": [
              "lint"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "lint",
            "script": [
              "go run build/ci.go lint"
            ]
          },
          {
            "go": "1.11.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.12.x",
            "os": "linux",
            "env": [
              "GO111MODULE=on"
            ],
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "linux",
            "arch": "amd64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = pull_request",
            "os": "linux",
            "arch": "arm64",
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ]
          },
          {
            "go": "1.13.x",
            "os": "osx",
            "stage": "build",
            "script": [
              "echo \"Increase the maximum number of open file descriptors on macOS\"",
              "NOFILE=20480",
              "sudo sysctl -w kern.maxfiles=$NOFILE",
              "sudo sysctl -w kern.maxfilesperproc=$NOFILE",
              "sudo launchctl limit maxfiles $NOFILE $NOFILE",
              "sudo launchctl limit maxfiles",
              "ulimit -S -n $NOFILE",
              "ulimit -n",
              "unset -f cd",
              "go run build/ci.go install",
              "go run build/ci.go test -coverage $TEST_PACKAGES"
            ],
            "osx_image": "xcode11.3"
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "ubuntu-ppa"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "devscripts",
                  "debhelper",
                  "dput",
                  "fakeroot",
                  "python-bzrlib",
                  "python-paramiko"
                ]
              }
            },
            "script": [
              "echo '|1|7SiYPr9xl3uctzovOTj4gMwAC1M=|t6ReES75Bo/PxlOPJ6/GsGbTrM0= ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA0aKz5UTUndYgIGG7dQBV+HaeuEZJ2xPHo2DS2iSKvUL4xNMSAY4UguNW+pX56nAQmZKIZZ8MaEvSj6zMEDiq6HFfn5JcTlM80UwlnyKe8B8p7Nk06PPQLrnmQt5fh0HmEcZx+JU9TZsfCHPnX7MNz4ELfZE6cFsclClrKim3BHUIGq//t93DllB+h4O9LHjEUsQ1Sr63irDLSutkLJD6RXchjROXkNirlcNVHH/jwLWR5RcYilNX7S5bIkK8NlWPjsn/8Ua5O7I9/YoE97PpO6i73DTGLh5H9JN/SITwCKBkgSDWUt61uPK3Y11Gty7o2lWsBjhBUm2Y38CBsoGmBw==' >> ~/.ssh/known_hosts",
              "go run build/ci.go debsrc -goversion 1.13.6 -upload ethereum/ethereum -sftp-user geth-ci -signer \"Go Ethereum Linux Builder <geth-ci@ethereum.org>\""
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "sudo": "required",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "gcc-multilib"
                ]
              }
            },
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch 386",
              "go run build/ci.go archive -arch 386 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "sudo -E apt-get -yq --no-install-suggests --no-install-recommends --force-yes install gcc-arm-linux-gnueabi libc6-dev-armel-cross gcc-arm-linux-gnueabihf libc6-dev-armhf-cross gcc-aarch64-linux-gnu libc6-dev-arm64-cross",
              "sudo ln -s /usr/include/asm-generic /usr/include/asm",
              "GOARM=5 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=5 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=6 go run build/ci.go install -arch arm -cc arm-linux-gnueabi-gcc",
              "GOARM=6 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "GOARM=7 go run build/ci.go install -arch arm -cc arm-linux-gnueabihf-gcc",
              "GOARM=7 go run build/ci.go archive -arch arm -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go install -arch arm64 -cc aarch64-linux-gnu-gcc",
              "go run build/ci.go archive -arch arm64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-linux-mips"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go xgo --alltools -- --targets=linux/mips --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips; do mv -f \"${bin}\" \"${bin/-linux-mips/}\"; done",
              "go run build/ci.go archive -arch mips -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mipsle --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mipsle; do mv -f \"${bin}\" \"${bin/-linux-mipsle/}\"; done",
              "go run build/ci.go archive -arch mipsle -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64 --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64; do mv -f \"${bin}\" \"${bin/-linux-mips64/}\"; done",
              "go run build/ci.go archive -arch mips64 -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds",
              "go run build/ci.go xgo --alltools -- --targets=linux/mips64le --ldflags '-extldflags \"-static\"' -v",
              "for bin in build/bin/*-linux-mips64le; do mv -f \"${bin}\" \"${bin/-linux-mips64le/}\"; done",
              "go run build/ci.go archive -arch mips64le -type tar -signer LINUX_SIGNING_KEY -upload gethstore/builds"
            ],
            "services": [
              "docker"
            ]
          },
          {
            "if": "type = push",
            "os": "linux",
            "env": [
              "azure-android",
              "maven-android"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "addons": {
              "apt": {
                "packages": [
                  "oracle-java8-installer",
                  "oracle-java8-set-default"
                ]
              }
            },
            "script": [
              "curl https://dl.google.com/android/repository/android-ndk-r19b-linux-x86_64.zip -o android-ndk-r19b.zip",
              "unzip -q android-ndk-r19b.zip && rm android-ndk-r19b.zip",
              "mv android-ndk-r19b $ANDROID_HOME/ndk-bundle",
              "mkdir -p $GOPATH/src/github.com/ethereum",
              "ln -s `pwd` $GOPATH/src/github.com/ethereum/go-ethereum",
              "go run build/ci.go aar -signer ANDROID_SIGNING_KEY -deploy https://oss.sonatype.org -upload gethstore/builds"
            ],
            "android": {
              "components": [
                "platform-tools",
                "tools",
                "android-15",
                "android-19",
                "android-24"
              ]
            },
            "language": "android",
            "before_install": [
              "curl https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz | tar -xz",
              "export PATH=`pwd`/go/bin:$PATH",
              "export GOROOT=`pwd`/go",
              "export GOPATH=$HOME/go"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = push",
            "os": "osx",
            "env": [
              "azure-osx",
              "azure-ios",
              "cocoapods-ios"
            ],
            "git": {
              "submodules": false
            },
            "stage": "build",
            "script": [
              "go run build/ci.go install",
              "go run build/ci.go archive -type tar -signer OSX_SIGNING_KEY -upload gethstore/builds",
              "gem uninstall cocoapods -a -x",
              "gem install cocoapods",
              "mv ~/.cocoapods/repos/master ~/.cocoapods/repos/master.bak",
              "sed -i '.bak' 's/repo.join/!repo.join/g' $(dirname `gem which cocoapods`)/cocoapods/sources_manager.rb",
              "if [ \"$TRAVIS_PULL_REQUEST\" = \"false\" ]; then git clone --depth=1 https://github.com/CocoaPods/Specs.git ~/.cocoapods/repos/master && pod setup --verbose; fi",
              "xctool -version",
              "xcrun simctl list",
              "export CGO_CFLAGS_ALLOW='-fmodules|-fblocks|-fobjc-arc'",
              "go run build/ci.go xcode -signer IOS_SIGNING_KEY -deploy trunk -upload gethstore/builds"
            ]
          },
          {
            "go": "1.13.x",
            "if": "type = cron",
            "os": "linux",
            "env": [
              "azure-purge"
            ],
            "git": {
              "submodules": false
            },
            "dist": "xenial",
            "stage": "build",
            "script": [
              "go run build/ci.go purge -store gethstore/builds -days 14"
            ]
          }
        ]
      },
      "sudo": false,
      "group": "stable",
      ".result": "configured",
      "language": "go",
      "go_import_path": "github.com/ethereum/go-ethereum"
    },
    "state": "failed",
    "started_at": "2020-02-13T03:59:19Z",
    "finished_at": "2020-02-13T04:01:43Z",
    "duration": 144,
    "job_ids": [
      649785719,
      649785720,
      649785721,
      649785722,
      649785723,
      649785724
    ]
  }
]
